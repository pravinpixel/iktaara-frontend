import Link from 'next/link';
import { useRouter } from 'next/router';
import * as yup from 'yup';
import { useFormik } from 'formik';
import LoginLayout from '@/theme/layouts/LoginLayout';
import TextField from '@mui/material/TextField';
import {
    InputLabel,
    OutlinedInput,
    InputAdornment,
    IconButton,
    Typography,
} from '@mui/material';

import FormControl from '@mui/material/FormControl';
import Head from 'next/head';
import { useState } from 'react';
import Alert from 'react-bootstrap/Alert';
import 'react-toastify/dist/ReactToastify.css';
import { Col, Container, Row } from 'react-bootstrap';
import Card from 'react-bootstrap/Card';
import api from 'src/lib/api/user';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const initialValues = { email: '' };

const formSchema = yup.object().shape({
    email: yup.string().required('${path} is required'),
});

const ResetPassword = () => {

    const router = useRouter();
    const [loading, setLoading] = useState<boolean>(false);
    const [msg, setMsg] = useState<any>([]);
    const [errorshow, setErrorShow] = useState(false);

    const handleFormSubmit = (values: any) => {
        setMsg([]);
        setLoading(true);
        setErrorShow(false);
        const result = api.restPassword(values).then((res: any) => {
            toast.success(res.message, {
                hideProgressBar: true,
                autoClose: 2000,
                type: 'success',
                position: 'top-right',
            });
            router.push('/login');
        });
    };

    const { values, errors, touched, handleBlur, handleChange, handleSubmit } =
        useFormik({
            onSubmit: handleFormSubmit,
            initialValues,
            validationSchema: formSchema,
        });

    const [showPassword, setShowPassword] = useState(false);
    const handleClickShowPassword = () => setShowPassword((show) => !show);
    const handleMouseDownPassword = (
        event: React.MouseEvent<HTMLButtonElement>,
    ) => {
        event.preventDefault();
    };

    return (<>
        <LoginLayout>
            <Head>
                <title>IKTARAA | Login</title>
            </Head>
            <Container>
                <Row className="justify-content-center pt-4">
                    <Col className="col-md-5 col-sm-8 col-xs-12">
                        <Card>
                            <Card.Body>
                                <Alert show={errorshow} variant={'danger'}>
                                    <ul className="error-list">
                                        {msg.map((value: string, key: string) => {
                                            return <li key={`error-${key}`}>{value}</li>;
                                        })}
                                    </ul>
                                </Alert>

                                <Typography
                                    variant="h5"
                                    align="center"
                                    className="title my-3"
                                >
                                    Login Here!
                                    <span className="text-end">
                                        <Link href="/">x</Link>
                                    </span>
                                </Typography>
                                <form className="form login-form" onSubmit={handleSubmit}>
                                    <FormControl variant="outlined" className="col-12 mb-3">
                                        <InputLabel htmlFor="password">Password</InputLabel>
                                        <OutlinedInput
                                            id="password"
                                            name="password"
                                            required
                                            value={values.password}
                                            onChange={handleChange}
                                            type={showPassword ? 'text' : 'password'}
                                            endAdornment={
                                                <InputAdornment position="end">
                                                    <IconButton
                                                        aria-label="toggle password visibility"
                                                        onClick={handleClickShowPassword}
                                                        onMouseDown={handleMouseDownPassword}
                                                        edge="end"
                                                    >
                                                        {showPassword ? (
                                                            <VisibilityOff />
                                                        ) : (
                                                            <Visibility />
                                                        )}
                                                    </IconButton>
                                                </InputAdornment>
                                            }
                                            label="Password"
                                            error={errors.password ? true : false}
                                        />
                                    </FormControl>
                                </form>
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>
            </Container>
        </LoginLayout >
    </>);
}

export default ResetPassword;